
1、 求二叉树中的节点个数: getNodeNumRec（递归），getNodeNum（迭代）
2、 求二叉树的深度: getDepthRec（递归），getDepth
3、前序遍历，中序遍历，后序遍历: preorderTraversalRec, preorderTraversal, inorderTraversalRec, postorderTraversalRec
4、分层遍历二叉树（按层次从上往下，从左往右）: levelTraversal, levelTraversalRec（递归解法！）
5、 将二叉查找树变为有序的双向链表: convertBST2DLLRec, convertBST2DLL
6、 求二叉树第K层的节点个数：getNodeNumKthLevelRec, getNodeNumKthLevel
7、求二叉树中叶子节点的个数：getNodeNumLeafRec, getNodeNumLeaf
8、 判断两棵二叉树是否相同的树：isSameRec, isSame
9、判断二叉树是不是平衡二叉树：isAVLRec
10、 求二叉树的镜像（破坏和不破坏原来的树两种情况）：mirrorRec, mirrorCopyRec
10.1、判断两个树是否互相镜像：isMirrorRec
11、求二叉树中两个节点的最低公共祖先节点：getLastCommonParent, getLastCommonParentRec, getLastCommonParentRec2
12、求二叉树中节点的最大距离：getMaxDistanceRec
13、由前序遍历序列和中序遍历序列重建二叉树：rebuildBinaryTreeRec
14、判断二叉树是不是完全二叉树：isCompleteBinaryTree, isCompleteBinaryTreeRec